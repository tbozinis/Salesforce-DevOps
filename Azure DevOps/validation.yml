trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  - group: SF-CientIds

steps:
- task: DownloadSecureFile@1
  name: 'serverKey'
  displayName: 'Download server.key'
  inputs:
    secureFile: 'server.key'

- checkout: self
  persistCredentials: true

- script: |
    echo "INSTALLING WITH NPM"
    npm install sfdx-cli --global
  displayName: 'NPM & Dependances initialization'

- script: |
    if [[ "$(System.PullRequest.TargetBranch)" == "refs/heads/release/sit" ]]
    then
      echo "Authorise SIT sandbox"
      sfdx force:auth:jwt:grant --clientid $C_ID_SIT --jwtkeyfile $(serverKey.secureFilePath) --username $UNAME_SIT --instanceurl $SF_TEST -a org
    elif [[ "$(System.PullRequest.TargetBranch)" == "refs/heads/release/uat" ]]
    then
      echo "Authorise UAT sandbox"
      sfdx force:auth:jwt:grant --clientid $C_ID_UAT --jwtkeyfile $(serverKey.secureFilePath) --username $UNAME_UAT --instanceurl $SF_TEST -a org
    elif [[ "$(System.PullRequest.TargetBranch)" == "refs/heads/prod" ]]
    then
      echo "Authorise Production!"
      sfdx force:auth:jwt:grant --clientid $C_ID_PROD --jwtkeyfile $(serverKey.secureFilePath) --username $UNAME_PROD --instanceurl $SF_LOGIN -a org
    fi
  displayName: 'Authorize salesforce org'
  env:
    C_ID_SIT: $(CLIENT_ID_SIT)
    C_ID_UAT: $(CLIENT_ID_UAT)
    C_ID_PROD: $(CLIENT_ID_PROD)

- script: |
    sfdx force:source:convert -r ./force-app -d ./toDeploy
  displayName: 'Convert to deploy source'

- script: |
    sfdx force:mdapi:deploy -l RunLocalTests -c -d ./toDeploy -u org -w 45 | tee temp.txt
    temp=$(sed ':a;N;$!ba;s/\n/ asdf /g' temp.txt)
    echo $temp
    if grep -q "Component Failures" <<< "$temp";
      then
        echo "*** VALIDATION FAILED :: Component Failures***"
        exit 1
      else
        echo "Successfully validated the deployment"
    fi
    if grep -q "Test Failures" <<< "$temp";
      then
        echo "*** VALIDATION FAILED :: Test Failures ***"
        exit 2
      else
        echo "Successfully validated the deployment"
    fi

    echo " * Isolate the Deploy ID"
    deployId=$(echo $temp | grep -o -P "(?<=\bID:\s)(\w+)")
    echo " - Deploy ID:" $deployId
    echo " - Done!"
    echo "##vso[task.setvariable variable=D_ID;]$deployId"
  displayName: 'Validation'

- script: |
    git config --global user.email $GIT_EMAIL
    git config --global user.name $GIT_UNAME
    git fetch
    git checkout devOps/idMap 
    echo $D_ID > $(System.PullRequest.PullRequestId)
    git add $(System.PullRequest.PullRequestId)
    git commit -m "Save Deploy ID"
    git push origin devOps/idMap
    echo " - Done!"
  displayName: 'Version Deploy ID'
